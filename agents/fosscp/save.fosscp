#!/usr/bin/php
<?php
/***********************************************************
 Copyright (C) 2008 Hewlett-Packard Development Company, L.P.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 ***********************************************************/
/**
 * fosscp
 *
 * cp2foss agent, upload items from the ui (upload from server).
 * It is expected that this program will be called from a ui-plugin.
 * Scheduler should pass in the following parameters
 *
 * @param string $archive the path to the archive to upload
 * @param string $folder_pk the folder id to load under
 * @param (optional) string $description a short meaningful description
 * @param (optional) string $name the name to use for the upload
 * @param string $recurse recurse flag (0 | 1). 0 is only files, 1 is the
 * complete tree.
 * @parm int $upload_pk the upload associated with this request
 *
 * @return 0 for success, 1 for failure....
 *
 * @version "$Id: $"
 *
 */

/*
 * This agent should appear in the scheduler.conf as:
 * agent=fosscopy |
 * /usr/local/fossology/agents/engine-shell fosscp_agent \
 * '/usr/local/fossology/agents/fosscp_agent'
 *
 * engine-shell will convert all of the SQL columns into environment
 * variables.  E.G. The MSQ will return pfile=... and pfile_fk=...
 * These will become $ARG_pfile and $ARG_pfile_fk.
 *
 */
/*************************************************
 Restrict usage: Every PHP file should have this
 at the very beginning.
 This prevents hacking attempts.
 *************************************************/
$GlobalReady = 1;
if (!isset($GlobalReady)) { exit; }

require_once("pathinclude.h.php");
global $LIBDIR;
global $WEBDIR;
require_once("$WEBDIR/common/common-cli.php");

global $Plugins;
global $LIBEXECDIR;
$UI_CLI=1;
cli_Init();
db_logger("Starting fosscp agent");
$LOG = fopen('/tmp/fosscp.log', 'w') or die("can't open fosscp.log, $php_errormsg\n");

logger($LOG, "LOG Starting fosscp agent");
echo "DEBUG: Starting fosscp agent";
db_logger("Starting fosscp agent");
print "<pre>Starting fosscp agent\n</pre>";
echo "LOG Starting fosscp agent";

// Check Required parameters, save all parameters passed in
// if they are not saved they get over written on the next SQL.

echo "DEBUG: Argument Check fosscp agent";
if (empty($ARG_upload_pk))
{
  echo "FATAL: Upload ID (\$ARG_upload_pk) not set. Aborting.";
  exit(-1);
}
else
{
  $upload_pk = $ARG_upload_pk;
}
if (empty($ARG_folder_pk))
{
  echo "FATAL: Folder ID (\$ARG_folder_pk) not set. Aborting.";
  exit(-1);
}
else
{
  $parent_id = $ARG_folder_pk;
}
if (empty($ARG_recurse))
{
  echo "FATAL: \$ARG_recurse not set. Aborting.";
  exit -1;
}
else
{
  $resurse = $ARG_recurse;
}
if (empty($ARG_upload_file))
{
  echo "FATAL: \$ARG_upload_file not set. Aborting.";
  exit -1;
}
else
{
  $upload_file = $ARG_upload_file;
}
echo "DEBUG: Past Argument Check 1: fosscp agent";
#
# Steps:
# Check name and description
# make sure parent (folder_pk) exists
# if name given (or use default),
#   check to make sure name isn't associated with parent
#   IS: Fatal
#   NOT: create folder
#        get folder_pk of just created folder
#        create folderconents (use mode 1<<3, folder_pk, parent_id).
# depending on the recuse flag, tar up either just the files or the whole
# tree.
# schedule wget_agent on the upload_file
# schedule the default agents via fossjobs

echo "DEBUG: Argument Check 2: fosscp agent";
if (empty($ARG_name))
{
  $name = $ARG_upload_file;
}
else
{
  $name = $ARG_name;
}
if (empty($ARG_description))
{
  $ARG_description="Upload of $name";
}
else
{
  $description=$ARG_description;
}
echo "DEBUG: Past Argument Check 2: fosscp agent";
echo "DEBUG: folder Check: fosscp agent";
// Make sure the parent folder exists
echo "SELECT * FROM folder WHERE folder_pk = '$parent_id';";
if ( $ARG_folder_pk != $parent_id )
{
  exit(1);
}

// folder name exists under the parent?
echo "SELECT * FROM leftnav WHERE name = '$name' AND parent = '$parent_id' AND foldercontents_mode = '1';";
if (!empty($ARG_folder_pk))
{
  exit(1);
}
echo "DEBUG: folder Check Done: fosscp agent";
echo "DEBUG: folder Create: fosscp agent";
/*
 * Create the folder
 * Block SQL injection by protecting single quotes
 *
 * Protect the folder name with htmlentities.
 */
$name        = str_replace("'", "''", $name);           // PostgreSQL quoting
$description = str_replace("'", "''", $description);    // PostgreSQL quoting

echo "!INSERT INTO folder (folder_name,folder_desc) VALUES ('$name','$description');";
echo "SELECT folder_pk FROM folder WHERE folder_name='$name' AND folder_desc='$description';";
if (empty($ARG_folder_pk))
{
  echo "FATAL:Upload folder $name was not get created, upload canceled";
  exit(1);
}
else
{
  $child_id = $ARGS_folder_pk;
}
echo "DEBUG: folder Create Done: fosscp agent";
echo "!INSERT INTO foldercontents (parent_fk,foldercontents_mode,child_id) VALUES ('$parent_id','1<<3','$child_id');";

// save files or the whole tree?
// NOTE, need to also test the type of the $upload_path, if they said get
// everything, but they pointed at a file, the corect thing should occur.
if (is_dir($upload_file))
{
  if ($recurse == 1)
  {
    //tar up everything
    $upload_path = suckupfs($upload_file, TRUE);
  }
  else
  {
    # save just the files
    $upload_path = suckupfs($upload_file, FALSE);
  }
}
else
{
  $upload_path = $upload_file;
}
// Run wget_agent locally to import the file.

logger($LOG, "LOG: upload_path is:$upload_path");
db_logger("upload_path is:$upload_path");
print "</pre>upload_path is:$upload_path\n</pre>";
echo "LOG upload_path is:$upload_path";
echo "DEBUG upload_path is:$upload_path";
logger($LOG, "LOG: scheduling wget_agent");
logger($LOG, "LOG: libexecdir is:$LIBEXECDIR");
//echo "LOG: libexecdir is:$LIBEXECDIR\n";

$Prog = "$LIBEXECDIR/agents/wget_agent -k $upload_pk '$upload_path'";
$last = exec($Prog, $output, $rtn_code);
unlink($upload_path);
//echo "LOG: return code from wget is:$rtn_code";
logger($LOG, "LOG: return code from wget is:$rtn_code");
if ($rtn_code != 0)
{
  echo "FATAL Could not download the file with wget";
  db_logger("FATAL: Could not download the file with wget");
  exit(1);
}

fclose($LOG);
exit(0);  # done successfully

/**
 * function logger
 * write/append a message to the log handle passed in.
 * 
 * @param resource $handle the open file handle
 * @param string $message the message to put in the log file, the string
 * should not have a new line at the end, this function will add it.
 * 
 * @return null on sucess, string for failure
 * 
 */

function logger($handle, $message)
{
  $message .= "\n";
  $wrote = fwrite ($handle, $message);
  if ($wrote == -1)
  {
    return("ERROR: could not write message to $handle\n");
  }
  return(Null);
}

function db_logger($message)
{
  global $DB;
  
  if(empty($DB))
  {
    return null;
  }
  $log_table_enum = 666;
  $log_type   = 0; // Debug
  $log_msg    = $message;
  $logger = 'fosscp_agent';
  $sql = "INSERT into LOG (log_table_enum, log_rec_fk, log_type, log_message, log_logger) VALUES ('$log_table_enum', '0', '$log_type', '$log_msg', '$logger');";
  $results = $DB->Action($sql);
  return($resutls);
}
?>