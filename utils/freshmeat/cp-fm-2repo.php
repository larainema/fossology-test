#!/usr/bin/php

<?php
/**
 * cp2repo: load archives into the db, creating folders as needed.
 *
 * @package cp2repo
 * @author mark.donohoe@hp.com
 * @version 0.1
 *
 */

// For now, assume previous process has determined if the archive has changed
// and just calls this routine to do the load.  That is, this routine is 
// not expected to determine if the archive has changed.

//issues:
// what to do if all the data is not present.  For example, osrb projects
// may not have a version, rank, or other data that is there for projects
// from freshmeat.  Talk with Bob, use some sort of 'default' if there 
// is no data.

# 1. process parameter(s) and sanity check.
# 2. connect to db
# Assume folders are pre-created....
# 3. Check: If folder doesn't exist, create it.
# 5. create upload record.
# 6. webgoldimport
# 6. job_unpack
# 7. schedule nomos...
# What else?

require_once("./pathinclude.h.php");
require_once("$PHPDIR/webcommon.h.php");
require_once("$PHPDIR/jobs.h.php");
require_once("$PHPDIR/db_postgres.h.php");

$usage = <<< USAGE
Usage: loadarchive -f <file>
   Where <file> is the file generated by gp with loadable archives.

USAGE;


if ($argc <= 2) {
  echo $usage;
  exit(1);
}

for ($i = 1; $i < $argc; $i++) {
    switch ($argv[$i]) {
    case '-f':
      $i++;
      if (isset($argv[$i])) {
	$archive_file = $argv[$i];
      } 
      else {
	die("ERROR: Must specify the path to the list of archives after -f");
      }
      break;
    case '-h':
      echo $usage;
      exit(0);
      break;
    default:
      die("ERROR: Unknown argument: $argv[$i]\n$usage");
      break;
    }
}

// if you do it yourself....use the lib...
//$_pg_conn = pg_connect(str_replace(";", " ", 
//	   file_get_contents("{$DATADIR}/dbconnect/{$PROJECT}")));

$path = "{$DATADIR}/dbconnect/{$PROJECT}";

$uts = time();
$dt = strftime('%c');
echo "Starting to load archives at: $dt\n";

db_init($path);

if (!$_pg_conn) {
  echo "ERROR: could not connect to DB\n";
  exit(1);
}

// Folders should have been premade by mk_fmdirs when db was created.
// Even so, always check to make sure.
// Well?

/*
 * Legend for file that is read.  Below is a sample line.
 *
 *rank  name arpath
 * 5    gcc  /var/lib/nomos3/golden070807/gcc-4.2.0.tar.bz2, 
 * 
 * desc                          vers     vers_id  vers_date
 * 'The GNU Compiler Collection' '4.2.0'  '255618' '2007-06-13 00:11:58'
 *
 */

#$fake = '5, gcc, /var/lib/nomos3/golden070807/gcc-4.2.0.tar.bz2, The GNU Compiler Collection, 4.2.0, 255618, 2007-06-13 00:11:58';
#$ar_data = explode(',', $fake);

$Arfile = fopen("$archive_file", 'r') or 
  die("Can't open file: $php_error_msg\n");

// parse the string (why does php make this so hard?)

while($line = fgets($Arfile, 1024)){
  $rank   = strtok($line, ' ');
  $name   = strtok(' ');
  $arpath = strtok(' ');
  // strtok doesn't seem to be able to deal with 'a long string with spaces'
  $fq_pos = strpos($line, '\'');
  $past = $fq_pos + 1;
  $bq_pos = strpos($line, '\'', $past);
  $one_past = $bq_pos + 1;
  $desc = substr($line, $fq_pos, ($one_past - $fq_pos));
//  echo "desc-1 is:$desc\n";
  $restOf_string = substr($line, $one_past);
//  echo "ROS:$restOf_string\n";
  $ver     = strtok($restOf_string, " ");
  $ver_id   = strtok(" ");
  $ver_date = strtok(" ");
// put the trailing ' back on
  $ver_date .= '\'';            

  // get the directory to unpack the archive in
  $folder = hash2bucket($name);

  $sql = 
    "select folder_pk, folder_name from folder where folder_name='$folder'";

  $alpha_folder = db_query1($sql);

// 1. create upload rec
// 2. use webgoldimport to unpack 
// 2. use that to create a job_create_unpack
// 3. schedule nomos with job_create_nomos

  $upload_fk =
    createuploadrec($alpha_folder, $name, $desc, $arpath, 1<<3);

  $cmd = "$AGENTDIR/webgoldimport $upload_fk $arpath $name '' 2>&1";
 
  $lastline = exec($cmd, $out, $retval);
  #echo "lastline is:$lastline\n";

  if($retval != 0) {
  } 
  echo "ERROR: could not run webgoldimport, return code is:$retval\n";

  $jobQ = job_create_unpack($upload_fk, $name, '');

  job_create_nomos($upload_fk, $jobQ);
}

$ute = time();
$dt = strftime('%c');
echo "Ending loading of archives at: $dt\n";
$elsp = $uts - $ute;
echo "Elapse time is:$elsp\n";

// End of Main

/**
 * funciton: hash2bucket
 * 
 * Returns the folder name to place the archive in. If the folder
 * doesn't exist, it's created with 'Freshmeat' as the parent folder.
 *
 * The folder name will be in the form x-x. For example, a-c.
 * If the name of the project does not start with an alpha, it will
 * be placed in the 'Other' directory.
 *
 * @param string $name name of the project
 *
 */

function hash2bucket($name){

  $map = array('a' => 'a-c', 
	       'b' => 'a-c',
	       'c' => 'a-c',
	       'd' => 'd-f',
	       'e' => 'd-f',
	       'f' => 'd-f',
	       'g' => 'g-i',
	       'h' => 'g-i',
	       'i' => 'g-i',
	       'j' => 'j-l',
	       'k' => 'j-l',
	       'l' => 'j-l',
	       'm' => 'm-o',
	       'n' => 'm-o',
	       'o' => 'm-o',
	       'p' => 'p-r',
	       'q' => 'p-r',
	       'r' => 'p-r',
	       's' => 's-u',
	       't' => 's-u',
	       'u' => 's-u',
	       'v' => 'v-z',
	       'w' => 'v-z',
	       'x' => 'v-z',
	       'y' => 'v-z',
	       'z' => 'v-z'
	       );

  // Check if we have a non-alpha name (e.g. starts with a non-alpha char).
  $dir = $map[substr($name,0,1)];
  if (isset($dir)){
    return($dir);
  }
  else {
    return('Other');
  }
  
}

?>