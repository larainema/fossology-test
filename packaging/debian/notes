Notes on the Debian packaging of FOSSology v2.0
==========================================
1.) The debian/ directory is kept in upstream SVN, but it is excluded
from upstream release tarballs in order to prevent the messy
situation of having to patch and merge this directory.

2.) How to build packages. First prepare using one of the following
 A.) svn export the whole tree and then have the most recent upstream
   tarball unpacked as fossology-<version>.orig
 B.) * unpack the upstream tarball once for your working directory
     * unpack it again as fossology-<version>.orig for the upstream
     * export the debian directory and put it in the working dir
 C.) use an existing debian source package
Then hack away on the working directory and use normal methods for
building the package (e.g. "debuild -rfakeroot").

3.) FOSSology v2.0 is also composed of several different components,
but it changed a lot as whole fossology instructure changed. Here is an explanation of the situation...

Things need to happen in a certain order:
  * fossology-core package is the core component in v2.0, it provided all
    the common resources needed by other components. It provide lib/db/web/cli components
  * fossology-core needs to be installed before another packages
  * All the v2.0 agents seperate into different component packages, it can
    be installed/uninstalled easily
  * The default fossology package installs all the components

So that that results in the following packages and relationships:
  * fossology Depends on all the components
  * fossology-scheduler Depends on fossology-core
  * fossology-ununpack Depends on fossology-core
  * fossology-copyright Depends on fossology-core
  * fossology-nomos Depends on fossology-core
  * fossology-pkgagent Depends on fossology-core
  * fossology-buckets Depends on fossology-nomos and fossology-pkgagent
  * fossology-mimetype Depends on fossology-core
  * fossology-delagent Depends on fossology-core

4.) The first FOSSology v2.0 packages don't support multi-system
